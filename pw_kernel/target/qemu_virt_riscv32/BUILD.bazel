# Copyright 2025 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_rust//rust:defs.bzl", "rust_library")
load("//pw_build:merge_flags.bzl", "flags_from_dict")
load("//pw_kernel:flags.bzl", "KERNEL_DEVICE_COMMON_FLAGS")
load("//pw_kernel/target/qemu_virt_riscv32:defs.bzl", "TARGET_COMPATIBLE_WITH")

package(default_visibility = [":__subpackages__"])

platform(
    name = "qemu_virt_riscv32",
    constraint_values = [
        ":target_qemu_virt_riscv32",
        "//pw_build/constraints/riscv/extensions:I",
        "//pw_build/constraints/riscv/extensions:M",
        "//pw_build/constraints/riscv/extensions:C",
        "//pw_build/constraints/riscv/extensions:A",
        "//pw_build/constraints/rust:no_std",
        "@platforms//cpu:riscv32",
        "@platforms//os:none",
    ],
    flags = flags_from_dict(
        KERNEL_DEVICE_COMMON_FLAGS | {
            "//pw_kernel/config:kernel_config": ":config",
            "//pw_kernel/subsys/console:console_backend": "//pw_kernel/subsys/console:console_backend_semihosting",
        },
    ),
)

constraint_value(
    name = "target_qemu_virt_riscv32",
    constraint_setting = "//pw_kernel/target:target",
)

ENTRY_DEPS = [
    ":uart",
    ":config",
    "//pw_kernel/arch/riscv:arch_riscv",
    "//pw_kernel/drivers/uart/uart_16550:uart_16550_config",
    "//pw_kernel/kernel",
    "@rust_crates//:riscv-rt",
]

rust_library(
    name = "entry",
    srcs = ["entry.rs"],
    edition = "2024",
    tags = ["kernel"],
    target_compatible_with = TARGET_COMPATIBLE_WITH,
    deps = ENTRY_DEPS,
)

rust_library(
    name = "config",
    srcs = ["config.rs"],
    crate_name = "kernel_config",
    edition = "2024",
    tags = ["kernel"],
    target_compatible_with = TARGET_COMPATIBLE_WITH,
    deps = [
        "//pw_kernel/config:kernel_config_interface",
        "//pw_kernel/drivers/uart/uart_16550:uart_16550_config",
        "//pw_kernel/lib/memory_config",
    ],
)

alias(
    name = "uart",
    actual = "//pw_kernel/drivers/uart/uart_16550:uart_16550_kernel",
)

filegroup(
    name = "linker_script_template",
    srcs = ["target.ld.tmpl"],
)
